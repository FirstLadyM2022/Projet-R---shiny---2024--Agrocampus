library(shiny)
library(lattice)
library(htmlwidgets)
library(leafem)
library(ggplot2)
library(plotly)
library(readxl)
library(readr)
library(dplyr)
library(imager)
shinyUI (fluidPage(
fluidPage(
titlePanel("VERGER-MARAICHER"),
fluidRow(
column(4,
numericInput("An", "Annee", min=2017,max=2023,value = 2023),
),
column(4,
numericInput("Period", "Période de l'année", min=1,max=3,value = 1) ,
),),
fluidRow(
column(12,
plotlyOutput("sortie1"),
),  ),)
))
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(readxl)
library(readr)
library(dplyr)
library(imager)
getwd
setwd
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(data.table)
set.seed(1234)
dt <- data.table(group1 = c("A", "B"),
group2 = rep(c("C", "D"), each = 5000),
value = rnorm(10000),
weight = sample(1:10, 10000, replace = TRUE))
dt
write.table(dt,"dt.csv",sep=",",row.names=FALSE,quote=FALSE)
cat("File size (MB):", round(file.info("dt.csv")$size/1024^2),"\n")
system.time(df <- read.table("dt.csv",sep=",",header=T,stringsAsFactors=F))
system.time(dt <- fread("dt.csv"))
all.equal(as.data.table(df),dt)
set.seed(1234)
n <- 1e6
dt2 <- data.table(a=sample(1:1000,n,replace=TRUE),
b=runif(n),
c=rnorm(n),
d=sample(c("A","B","C","D"),n,replace=TRUE))
write.table(dt2,"dt2.csv",sep=",",row.names=FALSE,quote=FALSE)
cat("Taille en (MB):", round(file.info("dt2.csv")$size/1024^2),"\n")
system.time(df2 <- read.table("dt2.csv", sep=",", header=TRUE, stringsAsFactors=FALSE))
system.time(dt2 <- fread("dt2.csv"))
dt[group1 == "A", mean(value), by = group2]
dt[1:2, ]
dt[c(1,5)] # virgule optionnelle
dt[order(value), ]
dt[weight > 9, ] # pas besoin de guillemets
dt[weight > 9 & group2 == "C", ]
dt[, 1]
dt[, c(1,3)]
dt[, "group1"]
dt[, c("group1", "value")]
dt[, list(group1)]
dt[, list(group1, value)]
dt[, .(group1, value)]
dt[, list(mygroup = group1, myvalue = value)][1:2]
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(data.table)
set.seed(1234)
dt <- data.table(group1 = c("A", "B"),
group2 = rep(c("C", "D"), each = 5000),
value = rnorm(10000),
weight = sample(1:10, 10000, replace = TRUE))
dt
library(readxl)
setwd("/Users/massambadiop/Desktop/INSTITUT AGRO/M1H/BIOINFO/Projet rosier")
Rose=read_excel("/Users/massambadiop/Desktop/INSTITUT AGRO/M1H/BIOINFO/Projet rosier/RDF1219_corr.xlsx",na="NA")
Mucine <- mucine[,1:4]
mucine <- read.table("/Users/massambadiop/Documents/INSTITUT AGRO/M2 Sciences des données/Données expérimentales/TD Donnees experimentales/mucine.txt", sep= "\t", header= T, dec=",")
mucine
Mucine <- mucine[,1:4]
ls(Mucine)
head(Mucine)
ls(Mucine)
mod_glob <- lm(mucines~veau + site + proteines + eau:site + veau:proteines + site:proteines, data = Mucines)
mod_glob <- lm(mucines~veau + site + proteines + eau:site + veau:proteines + site:proteines, data = Mucine)
mod_glob <- lm(mucines~veau + site + proteines + veau:site + veau:proteines + site:proteines, data = Mucine)
anova(mod_null,mod_glob)
mod_glob <- lm(mucines~veau + site + proteines + veau:site + veau:proteines + site:proteines, data = Mucine)
mod_null <- lm(mucines~1)
mod_null <- lm(mucines~1,data=Mucine)
mod_glob <- lm(mucines~veau + site + proteines + veau:site + veau:proteines + site:proteines, data = Mucine)
mod_null <- lm(mucines~1,data=Mucine)
anova(mod_null,mod_glob)
# test des effets individuels
mod_glob <- lm(mucines~veau,data = Mucine)
anova(mod_null,mod_muc)
mod_muc <- lm(mucines~veau,data = Mucine)
anova(mod_null,mod_muc)
mod_veau <- lm(mucines~veau,data = Mucine)
mod_site <- lm(mucines~site,data = Mucine)
mod_pro <- lm(mucines~proteines,data = Mucine)
mod_VP <- lm(mucines~veau:proteines,data = Mucine)
mod_VS <- lm(mucines~veau:site,data = Mucine)
mod_SP <- lm(mucines~site:proteines,data = Mucine)
anova(mod_null,mod_veau)
anova(mod_null,mod_pro)
anova(mod_null,mod_site)
anova(mod_null,mod_VP)
anova(mod_null,mod_VS)
anova(mod_null,mod_SP)
n_levels <- length(levels(Mucine$veau))
contrasts(Mucine$veau) <- contr.sum(n= n_levels)
n_levels <- length(levels(Mucine$veau))
n_levels
anova(mod_VP,mod_glob)
anova(mod_VS,mod_glob)
anova(mod_SP,mod_glob)
Anova(mod_VP,mod_glob)
#ecriture du modele global
require(car)
Anova(mod_VP,mod_glob)
Anova(mod_VP,mod_glob, type="III")
mod_null <- lm(mucines~1,data=Mucine)
Anova(mod_,mod_glob, type="III")
mod_glob <- lm(mucines~veau + site + proteines + veau:site + veau:proteines + site:proteines, data = Mucine)
mod_null <- lm(mucines~1,data=Mucine)
Anova(mod_null,mod_glob, type="III")
Anova(mod_glob, type="III")
n_levels <- length(levels(Mucine$veau))
contrasts(Mucine$veau) <- contr.sum(n= n_levels)
summary(mucine)
Mucine$veau <- factor(Mucine$veau)
Mucine$site <- factor(Mucine$site)
Mucine$proteines <- factor(Mucine$proteines)
Mucine$veau <- factor(Mucine$veau)
#ecriture du modele global
require(car)
n_levels <- length(levels(Mucine$veau))
contrasts(Mucine$veau) <- contr.sum(n= n_levels)
mod_glob <- lm(mucines~veau + site + proteines + veau:site + veau:proteines + site:proteines, data = Mucine)
mod_null <- lm(mucines~veau + site + proteines + veau:site + veau:proteines + site:proteines, data = Mucine)
Anova(mod_glob, type="III")
mod_glob <- lm(mucines~site + proteines + veau:site + veau:proteines + site:proteines, data = Mucine)
Anova(mod_glob, type="III")
mod_glob <- lm(mucines~site + proteines + veau:site + site:proteines, data = Mucine)
Anova(mod_glob, type="III")
Mucine$site <- factor(Mucine$site)
Mucine$proteines <- factor(Mucine$proteines)
Mucine$veau <- factor(Mucine$veau)
n_levels <- length(levels(Mucine$proteines))
n_levels <- length(levels(Mucine$veau))
contrasts(Mucine$veau) <- contr.sum(n= n_levels)
n_levels <- length(levels(Mucine$site))
contrasts(Mucine$site) <- contr.sum(n= n_levels)
n_levels <- length(levels(Mucine$proteines))
contrasts(Mucine$proteines) <- contr.sum(n= n_levels)
mod_glob <- lm(mucines~veau + site + proteines + veau:site + veau:proteines + site:proteines, data = Mucine)
Anova(mod_glob, type="III")
mod_glob <- lm(mucines~veau + site + proteines + veau:site + site:proteines, data = Mucine)
Anova(mod_glob, type="III")
mod_glob <- lm(mucines~veau + site + proteines + veau:site, data = Mucine)
Anova(mod_glob, type="III")
View(mucine)
View(Mucine)
View(Mucine)
View(mucine)
table(mucine$veau,mucine$site,mucine$proteines,)
table(mucine$veau,mucine$site,mucine$proteines)
anova(mucines~veau,proteines,site,data=mucine)
anova(mucines~veau,proteines,site,data=Mucine)
table(Mucine$veau,Mucine$site,Mucine$proteines)
anova(Mucines~veau,proteines,site,data=Mucine)
Mucine <- mucine[,1:4]
Mucine$site <- factor(Mucine$site)
Mucine$proteines <- factor(Mucine$proteines)
Mucine$veau <- factor(Mucine$veau)
table(Mucine$veau,Mucine$site,Mucine$proteines)
anova(Mucines~veau,proteines,site,data=Mucine)
anova(lm(Mucines~veau,proteines,site,data=Mucine))
anova(lm(mucines~veau,proteines,site,data=Mucine))
Mucine
anova(lm(mucines~veau*proteines*site,data=Mucine))
table(Mucine$veau,Mucine$site,Mucine$proteines)
mod_glob <- lm(mucines~veau + site + proteines + veau:site, data = Mucine)
Anova(mod_glob, type="III")
n_levels <- length(levels(Mucine$proteines))
contrasts(Mucine$proteines) <- contr.sum(n= n_levels)
n_levels <- length(levels(Mucine$veau))
contrasts(Mucine$veau) <- contr.sum(n= n_levels)
install.packages("GAD")
mtcars
iris
my.f <- function(x,deg=0.5){
tmp <- (x[2]-((3+cos(4*pi*x[1]))/8+(x[1]^2)/2))
d <- sign(tmp)*abs(tmp)^(deg)
return(0.5+d)
}
n.points.train <- 100()
n.points.train <- 100
data.train <- data.frame(x1=runif(n.points.train),x2=runif(n.points.train))
prob <- apply(data.train,1,FUN=my.f, deg= 0.5)
class <- runif(n.points.train) < prob
data.train$class <- class
str(data.train)
prob.bayes <- apply(data.train,1,FUN=function(x){(x[2]-((3+cos(4*pi*x[1]))/8+(x[1]^2)/2))>0})
plot(prob.bayes$x1,prob.bayes$x2,col=2*as.numeric(1+class),pch=my.pch,xlim=c(0,1),ylim=c(0,1),bg="grey",xlab="X1",ylab="X2",cex=2)
setwd("/Users/massambadiop/Documents/INSTITUT AGRO/M2 Sciences des données/Données expérimentales/Donnees experimentales")
my.f <- function(x,deg=0.5){
tmp <- (x[2]-((3+cos(4*pi*x[1]))/8+(x[1]^2)/2))
d <- sign(tmp)*abs(tmp)^(deg)
return(0.5+d)
}
n.points.train <- 100
data.train <- data.frame(x1=runif(n.points.train),x2=runif(n.points.train))
#data.train <- data.frame(x1=rnorm(n.points.train,0.5,sd=0.2),x2=rnorm(n.points.train,0.5,sd=0.2))
prob <- apply(data.train,1,FUN=my.f,deg=0.5)
class <- runif(n.points.train) < prob
data.train$class <- class
my.pch <- rep(21,times=n.points.train)
w <- which(data.train$class)
my.pch[w] <- 24
par(mar=c(4,4,0.1,0.1))
plot(data.train$x1,data.train$x2,col=2*as.numeric(1+class),pch=my.pch,xlim=c(0,1),ylim=c(0,1),bg="grey",xlab="X1",ylab="X2",cex=2)
lines(x,(3+cos(4*pi*x))/8+(x^2)/2,type="l",ylim=c(0,1),lty=1,lwd=2)
n.points.train <- 5000
data.train <- data.frame(x1=runif(n.points.train),x2=runif(n.points.train))
prob <- apply(data.train,1,FUN=my.f,deg=0.5)
class <- runif(n.points.train) < prob
data.train$class <- class
my.pch <- rep(21,times=n.points.train)
w <- which(data.train$class)
my.pch[w] <- 24
par(mar=c(4,4,0.1,0.1))
plot(data.train$x1,data.train$x2,col=2*as.numeric(1+class),pch=my.pch,xlim=c(0,1),ylim=c(0,1),bg="grey",xlab="X1",ylab="X2",cex=2)
lines(x,(3+cos(4*pi*x))/8+(x^2)/2,type="l",ylim=c(0,1),lty=1,lwd=2)
plot(data.train$x1,data.train$x2,col=2*as.numeric(1+class),pch=my.pch,xlim=c(0,1),ylim=c(0,1),bg="grey",xlab="X1",ylab="X2",cex=0.5)
lines(data.train$x1,(3+cos(4*pi*x))/8+(x^2)/2,type="l",ylim=c(0,1),lty=1,lwd=2)
lines(data.train$x1,(3+cos(4*pi*x))/8+(x^2)/2,type="l",ylim=c(0,1),lty=1,lwd=2)
n.points.train <- 5000
data.train <- data.frame(x1=runif(n.points.train),x2=runif(n.points.train))
#data.train <- data.frame(x1=rnorm(n.points.train,0.5,sd=0.2),x2=rnorm(n.points.train,0.5,sd=0.2))
prob <- apply(data.train,1,FUN=my.f,deg=0.5)
class <- runif(n.points.train) < prob
data.train$class <- class
my.pch <- rep(21,times=n.points.train)
w <- which(data.train$class)
my.pch[w] <- 24
par(mar=c(4,4,0.1,0.1))
plot(data.train$x1,data.train$x2,col=2*as.numeric(1+class),pch=my.pch,xlim=c(0,1),ylim=c(0,1),bg="grey",xlab="X1",ylab="X2",cex=0.5)
lines(x,(3+cos(4*pi*x))/8+(x^2)/2,type="l",ylim=c(0,1),lty=1,lwd=2)
lines(x2,(3+cos(4*pi*x1))/8+(x1^2)/2,type="l",ylim=c(0,1),lty=1,lwd=2)
lines(x,(3+cos(4*pi*x1))/8+(x1^2)/2,type="l",ylim=c(0,1),lty=1,lwd=2)
data.train
log_mod <- glm(x2~x1,data = data.train)
log_mod
log_mod <- glm(x2~x1,data = data.train,family = binomial(link = "logit"))
log_mod$fitted.values
log_mod$data
table(log_mod$x1=0.5,log_mod$x2=0.5)
log_mod$coefficients
my.f(0.01327101)
log_mod <- glm(class~x1,x2,data = data.train,family = binomial(link = "logit"))
log_mod <- glm(class~x1,x2,data = data.train,family = "binomial")
nd <- data.frame(x1= 0.5, x2= 0.5)
predict(log_mod, newdata = nd,type = "response")
points(nd,col=3,pch=19)
class.test <- predict(log_mod, newdata = data.test, type = "response")>0.5
data.test <- data.frame(x1=runif(n.points.test),x2=runif(n.points.test))
n.points.test <- 5000
data.test <- data.frame(x1=runif(n.points.test),x2=runif(n.points.test))
#data.test <- data.frame(x1=rnorm(n.points.test,0.5,sd=0.2),x2=rnorm(n.points.test,0.5,sd=0.2))
prob <- apply(data.test,1,FUN=my.f)
class <- runif(n.points.test) < prob
data.test$class <- class
k.vec <- seq(20,1)
err.k.test <- rep(NA,times=length(k.vec))
for (i in 1:length(k.vec)){
k <- k.vec[i]
pred.test.knn <- knn(data.train[,1:2],data.test[,1:2],cl=data.train$class,k=k)
err.k.test[i] <- get.error(data.test$class, pred.test.knn)
}
x <- seq(0,1,0.01)
plot(x,(3+cos(4*pi*x))/8+(x^2)/2,type="l",ylim=c(0,1),lty=2)
get.error <- function(class,pred){
cont.tab <- table(class,pred)
return((cont.tab[2,1]+cont.tab[1,2])/(sum(cont.tab)))
}
my.f <- function(x,deg=0.5){
tmp <- (x[2]-((3+cos(4*pi*x[1]))/8+(x[1]^2)/2))
d <- sign(tmp)*abs(tmp)^(deg)
return(0.5+d)
}
n.points.train <- 200
data.train <- data.frame(x1=runif(n.points.train),x2=runif(n.points.train))
prob <- apply(data.train,1,FUN=my.f)
class <- runif(n.points.train) < prob
data.train$class <- class
plot(data.train$x1,data.train$x2,col=2*(data.train$class+1),pch=19)
n.points.test <- 5000
data.test <- data.frame(x1=runif(n.points.test),x2=runif(n.points.test))
prob <- apply(data.test,1,FUN=my.f)
class <- runif(n.points.test) < prob
data.test$class <- class
mod <- glm(class ~ x1+x2,data=data.train, family="binomial")
nd <- data.frame(x1=0.25,x2=0.75)
predict(mod,newdata=nd,type="response")
points(nd, col=3,pch=19)
class.test <- predict(mod,newdata=data.test,type="response") > 0.5
plot(data.test$x1,data.test$x2,col=2*(1+class.test))
points(x,(3+cos(4*pi*x))/8+(x^2)/2,type="l",ylim=c(0,1),lty=6,col=1,lwd=4)
points(0.5,0.6,col=3,pch=19,cex=1.5)
ss <- seq(0,1,by=0.01)
data.grid <- expand.grid(x1=ss,x2=ss)
pred.grid.deg1 <- predict(mod,newdata=data.grid,type="response") > 0.2
plot(data.grid$x1,data.grid$x2,col=2*(pred.grid.deg1+1),pch=19)
plot(x,(3+cos(4*pi*x))/8+(x^2)/2,type="l",ylim=c(0,1),lty=6,col=4,lwd=4)
contour(ss,ss,matrix(as.numeric(pred.grid.deg1),ncol=length(ss)),nlevels=1,add=TRUE,drawlabels=FALSE,col=2,lwd=1.5)
require("class")
pred.grid.knn <- knn(data.train[,1:2],data.grid,cl=data.train$class,k=3)
plot(c(0,1),c(0,1),col=0,xlab="X1",ylab="X2",main="Logistic")
lines(x,(3+cos(4*pi*x))/8+(x^2)/2,type="l",ylim=c(0,1),lty=2,lwd=3)
contour(ss,ss,matrix(as.numeric(pred.grid.deg1),ncol=length(ss)),nlevels=1,add=TRUE,drawlabels=FALSE,col=2,lwd=1)
contour(ss,ss,matrix(as.numeric(pred.grid.knn),ncol=length(ss)),nlevels=1,add=TRUE,drawlabels=FALSE,col=4,lwd=1)
pred.test.Bayes <- apply(data.test,1,FUN=function(x){
(x[2]-((3+cos(4*pi*x[1]))/8+(x[1]^2)/2)) > 0
})
err.Bayes <- get.error(data.test$class,pred.test.Bayes)
k.vec <- seq(20,1)
err.k <- rep(NA,times=length(k.vec))
for (i in 1:length(k.vec)){
k <- k.vec[i]
pred.test.knn <- knn(data.train[,1:2],data.test[,1:2],cl=data.train$class,k=k)
err.k[i] <- get.error(data.test$class, pred.test.knn)
}
mod.deg1 <- glm(class ~ x1+x2,data=data.train,family="binomial")
pred.logit.deg1 <- as.numeric(predict(mod.deg1,newdata=data.test,type="response") > 0.5)
err.logit.deg1 <- get.error(data.test$class,pred.logit.deg1)
plot(k.vec,err.k,type="b",ylim=c(0,max(max(err.k),err.Bayes,err.logit.deg1)))
abline(h=err.Bayes,col=2)
abline(h=err.logit.deg1,col=3)
legend("bottomright",legend=c("kNN","Bayes","Logistic"),col=c(1,2,3),lty=1)
############################
# U-shape
############################
make.modele <- function(deg){
mod <- glm(class ~ poly(x1,deg)+poly(x2,deg),data=data.train,family="binomial")
return(mod)
###
# Contour
vec.deg <- 1:10
make.modele <- function(deg){
mod <- glm(class ~ poly(x1,deg)+poly(x2,deg),data=data.train,family="binomial")
return(mod)
}
for (i in 1:2){
deg <- vec.deg[i]
mod <- make.modele(deg)
pred.grid.deg <- predict(mod,newdata=data.grid,type="response") > 0.5
contour(ss,ss,matrix(as.numeric(pred.grid.deg),ncol=length(ss)),nlevels=1,add=TRUE,drawlabels=FALSE,col=i,lwd=1)
}
vec.pred.train <- rep(NA, times=length(vec.deg))
vec.pred.test <- rep(NA, times=length(vec.deg))
for (i in 1:length(vec.deg)){
deg <- vec.deg[i]
mod <- make.modele(deg)
pred.deg.train <- predict(mod,newdata=data.train,type="response") > 0.5
pred.deg.test <- predict(mod,newdata=data.test,type="response") > 0.5
vec.pred.train[i] <- get.error(data.train$class,pred.deg.train)
vec.pred.test[i] <- get.error(data.test$class,pred.deg.test)
}
plot(vec.deg,vec.pred.train,type="b",ylim=c(0.1,0.15),col=0)
lines(vec.deg,vec.pred.test,type="b",col=2)
plot(k.vec,err.k,type="b",ylim=c(0,max(max(err.k),err.Bayes,err.logit.deg1)))
abline(h=err.Bayes,col=2)
abline(h= min(vec.pred.test),col=3)
legend("bottomright",legend=c("kNN","Bayes","Logistic"),col=c(1,2,3),lty=1)
plot(vec.deg,vec.pred.train,type="b",ylim=c(0.1,0.15),col=0)
lines(vec.deg,vec.pred.test,type="b",col=2)
for (i in 1:length(vec.deg)){
deg <- vec.deg[i]
mod <- make.modele(deg)
pred.grid.deg <- predict(mod,newdata=data.grid,type="response") > 0.5
contour(ss,ss,matrix(as.numeric(pred.grid.deg),ncol=length(ss)),nlevels=1,add=TRUE,drawlabels=FALSE,col=i,lwd=1)
}
vec.pred.train <- rep(NA, times=length(vec.deg))
vec.pred.test <- rep(NA, times=length(vec.deg))
for (i in 1:length(vec.deg)){
deg <- vec.deg[i]
mod <- make.modele(deg)
pred.deg.train <- predict(mod,newdata=data.train,type="response") > 0.5
pred.deg.test <- predict(mod,newdata=data.test,type="response") > 0.5
vec.pred.train[i] <- get.error(data.train$class,pred.deg.train)
vec.pred.test[i] <- get.error(data.test$class,pred.deg.test)
}
plot(vec.deg,vec.pred.train,type="b",ylim=c(0.1,0.15),col=0)
lines(vec.deg,vec.pred.test,type="b",col=2)
plot(k.vec,err.k,type="b",ylim=c(0,max(max(err.k),err.Bayes,err.logit.deg1)))
abline(h=err.Bayes,col=2)
abline(h= min(vec.pred.test),col=3)
legend("bottomright",legend=c("kNN","Bayes","Logistic"),col=c(1,2,3),lty=1)
plot(vec.deg,vec.pred.test,type="b")
shiny::runApp('Documents/INSTITUT AGRO/M2 Sciences des données/Analyse de données massives sur R/Projet Shiny/Projet-R---shiny---2024--Agrocampus-main/ShiNitrate')
